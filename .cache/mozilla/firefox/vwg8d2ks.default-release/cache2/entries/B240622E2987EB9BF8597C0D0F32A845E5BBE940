// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

define(function(requirejs) {
    "use strict";

    var $ = requirejs('jquery');
    var utils = requirejs('base/js/utils');

    var Contents = function(options) {
        /**
         * Constructor
         *
         * Preliminary documentation for the REST API is at 
         * https://github.com/ipython/ipython/wiki/IPEP-27%3A-Contents-Service
         *
         * A contents handles passing file operations
         * to the back-end.  This includes checkpointing
         * with the normal file operations.
         *
         * Parameters:
         *  options: dictionary
         *      Dictionary of keyword arguments.
         *          base_url: string
         */
        this.base_url = options.base_url;
    };

    /** Error type */
    Contents.DIRECTORY_NOT_EMPTY_ERROR = 'DirectoryNotEmptyError';

    Contents.DirectoryNotEmptyError = function() {
        // Constructor
        //
        // An error representing the result of attempting to delete a non-empty
        // directory.
        this.message = 'A directory must be empty before being deleted.';
    };
    
    Contents.DirectoryNotEmptyError.prototype = Object.create(Error.prototype);
    Contents.DirectoryNotEmptyError.prototype.name =
        Contents.DIRECTORY_NOT_EMPTY_ERROR;


    Contents.prototype.api_url = function() {
        var url_parts = [
            this.base_url, 'api/contents',
            utils.url_join_encode.apply(null, arguments),
        ];
        return utils.url_path_join.apply(null, url_parts);
    };

    /**
     * Creates a basic error handler that wraps a jqXHR error as an Error.
     *
     * Takes a callback that accepts an Error, and returns a callback that can
     * be passed directly to $.ajax, which will wrap the error from jQuery
     * as an Error, and pass that to the original callback.
     *
     * @method create_basic_error_handler
     * @param{Function} callback
     * @return{Function}
     */
    Contents.prototype.create_basic_error_handler = function(callback) {
        if (!callback) {
            return utils.log_ajax_error;
        }
        return function(xhr, status, error) {
            callback(utils.wrap_ajax_error(xhr, status, error));
        };
    };

    /**
     * File Functions (including notebook operations)
     */

    /**
     * Get a file.
     *
     * @method get
     * @param {String} path
     * @param {Object} options
     *    type : 'notebook', 'file', or 'directory'
     *    format: 'text' or 'base64'; only relevant for type: 'file'
     *    content: true or false; // whether to include the content
     */
    Contents.prototype.get = function (path, options) {
        /**
         * We do the call with settings so we can set cache to false.
         */
        var settings = {
            processData : false,
            cache : false,
            type : "GET",
            dataType : "json",
        };
        var url = this.api_url(path);
        var params = {};
        if (options.type) { params.type = options.type; }
        if (options.format) { params.format = options.format; }
        if (options.content === false) { params.content = '0'; }
        return utils.promising_ajax(url + '?' + $.param(params), settings);
    };


    /**
     * Creates a new untitled file or directory in the specified directory path.
     *
     * @method new
     * @param {String} path: the directory in which to create the new file/directory
     * @param {Object} options:
     *      ext: file extension to use
     *      type: model type to create ('notebook', 'file', or 'directory')
     */
    Contents.prototype.new_untitled = function(path, options) {
        var data = JSON.stringify({
          ext: options.ext,
          type: options.type
        });

        var settings = {
            processData : false,
            type : "POST",
            data: data,
            contentType: 'application/json',
            dataType : "json",
        };
        return utils.promising_ajax(this.api_url(path), settings);
    };

    Contents.prototype.delete = function(path) {
        var settings = {
            processData : false,
            type : "DELETE",
            dataType : "json",
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings).catch(
            // Translate certain errors to more specific ones.
            function(error) {
                // TODO: update IPEP27 to specify errors more precisely, so
                // that error types can be detected here with certainty.
                if (error.xhr.status === 400) {
                    throw new Contents.DirectoryNotEmptyError();
                }
                throw error;
            }
        );
    };

    Contents.prototype.rename = function(path, new_path) {
        var data = {path: new_path};
        var settings = {
            processData : false,
            type : "PATCH",
            data : JSON.stringify(data),
            dataType: "json",
            contentType: 'application/json',
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.trust = function(path) {
        var settings = {
            processData : false,
            type : "POST",
            contentType: 'application/json',
        };
        var url = this.api_url(path, "trust");
        return utils.promising_ajax(url, settings);
    }

    Contents.prototype.save = function(path, model) {
        /**
         * We do the call with settings so we can set cache to false.
         */
        var settings = {
            processData : false,
            type : "PUT",
            dataType: "json",
            data : JSON.stringify(model),
            contentType: 'application/json',
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings);
    };
    
    Contents.prototype.copy = function(from_file, to_dir) {
        /**
         * Copy a file into a given directory via POST
         * The server will select the name of the copied file
         */
        var url = this.api_url(to_dir);
        
        var settings = {
            processData : false,
            type: "POST",
            data: JSON.stringify({copy_from: from_file}),
            contentType: 'application/json',
            dataType : "json",
        };
        return utils.promising_ajax(url, settings);
    };

    /**
     * Checkpointing Functions
     */

    Contents.prototype.create_checkpoint = function(path) {
        var url = this.api_url(path, 'checkpoints');
        var settings = {
            type : "POST",
            contentType: false,  // no data
            dataType : "json",
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.list_checkpoints = function(path) {
        var url = this.api_url(path, 'checkpoints');
        var settings = {
            type : "GET",
            cache: false,
            dataType: "json",
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.restore_checkpoint = function(path, checkpoint_id) {
        var url = this.api_url(path, 'checkpoints', checkpoint_id);
        var settings = {
            type : "POST",
            contentType: false,  // no data
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.delete_checkpoint = function(path, checkpoint_id) {
        var url = this.api_url(path, 'checkpoints', checkpoint_id);
        var settings = {
            type : "DELETE",
        };
        return utils.promising_ajax(url, settings);
    };

    /**
     * File management functions
     */

    /**
     * List notebooks and directories at a given path
     *
     * On success, load_callback is called with an array of dictionaries
     * representing individual files or directories.  Each dictionary has
     * the keys:
     *     type: "notebook" or "directory"
     *     created: created date
     *     last_modified: last modified dat
     * @method list_notebooks
     * @param {String} path The path to list notebooks in
     */
    Contents.prototype.list_contents = function(path) {
        return this.get(path, {type: 'directory'});
    };

    return {'Contents': Contents};
});
        20200831163820F      define   callback   $   utils   Contents   requirejs   jquery   base/js/utils-   DirectoryNotEmptyError3   DIRECTORY_NOT_EMPTY_ERROR?   Contents.DirectoryNotEmptyError   Object   create   Error   prototype	   name5   Contents.prototype.api_url   api_url[   Contents.prototype.create_basic_error_handler5   create_basic_error_handler-   Contents.prototype.get   get?   Contents.prototype.new_untitled   new_untitled3   Contents.prototype.delete   delete3   Contents.prototype.rename   rename1   Contents.prototype.trust   trust/   Contents.prototype.save	   save/   Contents.prototype.copy	   copyI   Contents.prototype.create_checkpoint#   create_checkpointG   Contents.prototype.list_checkpoints!   list_checkpointsK   Contents.prototype.restore_checkpoint%   restore_checkpointI   Contents.prototype.delete_checkpoint#   delete_checkpointA   Contents.prototype.list_contents   list_contents   options   .this   base_url	   path   settings   url   params   processData   cache	   type   dataType   GET	   json   format   content   0   promising_ajax   ?   param   url_parts   arguments   api/contents   url_join_encode   apply   url_path_join   checkpoints    ò       ò   À         ò   // Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.

define(function(requirejs) {
    "use strict";

    var $ = requirejs('jquery');
    var utils = requirejs('base/js/utils');

    var Contents = function(options) {
        /**
         * Constructor
         *
         * Preliminary documentation for the REST API is at 
         * https://github.com/ipython/ipython/wiki/IPEP-27%3A-Contents-Service
         *
         * A contents handles passing file operations
         * to the back-end.  This includes checkpointing
         * with the normal file operations.
         *
         * Parameters:
         *  options: dictionary
         *      Dictionary of keyword arguments.
         *          base_url: string
         */
        this.base_url = options.base_url;
    };

    /** Error type */
    Contents.DIRECTORY_NOT_EMPTY_ERROR = 'DirectoryNotEmptyError';

    Contents.DirectoryNotEmptyError = function() {
        // Constructor
        //
        // An error representing the result of attempting to delete a non-empty
        // directory.
        this.message = 'A directory must be empty before being deleted.';
    };
    
    Contents.DirectoryNotEmptyError.prototype = Object.create(Error.prototype);
    Contents.DirectoryNotEmptyError.prototype.name =
        Contents.DIRECTORY_NOT_EMPTY_ERROR;


    Contents.prototype.api_url = function() {
        var url_parts = [
            this.base_url, 'api/contents',
            utils.url_join_encode.apply(null, arguments),
        ];
        return utils.url_path_join.apply(null, url_parts);
    };

    /**
     * Creates a basic error handler that wraps a jqXHR error as an Error.
     *
     * Takes a callback that accepts an Error, and returns a callback that can
     * be passed directly to $.ajax, which will wrap the error from jQuery
     * as an Error, and pass that to the original callback.
     *
     * @method create_basic_error_handler
     * @param{Function} callback
     * @return{Function}
     */
    Contents.prototype.create_basic_error_handler = function(callback) {
        if (!callback) {
            return utils.log_ajax_error;
        }
        return function(xhr, status, error) {
            callback(utils.wrap_ajax_error(xhr, status, error));
        };
    };

    /**
     * File Functions (including notebook operations)
     */

    /**
     * Get a file.
     *
     * @method get
     * @param {String} path
     * @param {Object} options
     *    type : 'notebook', 'file', or 'directory'
     *    format: 'text' or 'base64'; only relevant for type: 'file'
     *    content: true or false; // whether to include the content
     */
    Contents.prototype.get = function (path, options) {
        /**
         * We do the call with settings so we can set cache to false.
         */
        var settings = {
            processData : false,
            cache : false,
            type : "GET",
            dataType : "json",
        };
        var url = this.api_url(path);
        var params = {};
        if (options.type) { params.type = options.type; }
        if (options.format) { params.format = options.format; }
        if (options.content === false) { params.content = '0'; }
        return utils.promising_ajax(url + '?' + $.param(params), settings);
    };


    /**
     * Creates a new untitled file or directory in the specified directory path.
     *
     * @method new
     * @param {String} path: the directory in which to create the new file/directory
     * @param {Object} options:
     *      ext: file extension to use
     *      type: model type to create ('notebook', 'file', or 'directory')
     */
    Contents.prototype.new_untitled = function(path, options) {
        var data = JSON.stringify({
          ext: options.ext,
          type: options.type
        });

        var settings = {
            processData : false,
            type : "POST",
            data: data,
            contentType: 'application/json',
            dataType : "json",
        };
        return utils.promising_ajax(this.api_url(path), settings);
    };

    Contents.prototype.delete = function(path) {
        var settings = {
            processData : false,
            type : "DELETE",
            dataType : "json",
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings).catch(
            // Translate certain errors to more specific ones.
            function(error) {
                // TODO: update IPEP27 to specify errors more precisely, so
                // that error types can be detected here with certainty.
                if (error.xhr.status === 400) {
                    throw new Contents.DirectoryNotEmptyError();
                }
                throw error;
            }
        );
    };

    Contents.prototype.rename = function(path, new_path) {
        var data = {path: new_path};
        var settings = {
            processData : false,
            type : "PATCH",
            data : JSON.stringify(data),
            dataType: "json",
            contentType: 'application/json',
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.trust = function(path) {
        var settings = {
            processData : false,
            type : "POST",
            contentType: 'application/json',
        };
        var url = this.api_url(path, "trust");
        return utils.promising_ajax(url, settings);
    }

    Contents.prototype.save = function(path, model) {
        /**
         * We do the call with settings so we can set cache to false.
         */
        var settings = {
            processData : false,
            type : "PUT",
            dataType: "json",
            data : JSON.stringify(model),
            contentType: 'application/json',
        };
        var url = this.api_url(path);
        return utils.promising_ajax(url, settings);
    };
    
    Contents.prototype.copy = function(from_file, to_dir) {
        /**
         * Copy a file into a given directory via POST
         * The server will select the name of the copied file
         */
        var url = this.api_url(to_dir);
        
        var settings = {
            processData : false,
            type: "POST",
            data: JSON.stringify({copy_from: from_file}),
            contentType: 'application/json',
            dataType : "json",
        };
        return utils.promising_ajax(url, settings);
    };

    /**
     * Checkpointing Functions
     */

    Contents.prototype.create_checkpoint = function(path) {
        var url = this.api_url(path, 'checkpoints');
        var settings = {
            type : "POST",
            contentType: false,  // no data
            dataType : "json",
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.list_checkpoints = function(path) {
        var url = this.api_url(path, 'checkpoints');
        var settings = {
            type : "GET",
            cache: false,
            dataType: "json",
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.restore_checkpoint = function(path, checkpoint_id) {
        var url = this.api_url(path, 'checkpoints', checkpoint_id);
        var settings = {
            type : "POST",
            contentType: false,  // no data
        };
        return utils.promising_ajax(url, settings);
    };

    Contents.prototype.delete_checkpoint = function(path, checkpoint_id) {
        var url = this.api_url(path, 'checkpoints', checkpoint_id);
        var settings = {
            type : "DELETE",
        };
        return utils.promising_ajax(url, settings);
    };

    /**
     * File management functions
     */

    /**
     * List notebooks and directories at a given path
     *
     * On success, load_callback is called with an array of dictionaries
     * representing individual files or directories.  Each dictionary has
     * the keys:
     *     type: "notebook" or "directory"
     *     created: created date
     *     last_modified: last modified dat
     * @method list_notebooks
     * @param {String} path The path to list notebooks in
     */
    Contents.prototype.list_contents = function(path) {
        return this.get(path, {type: 'directory'});
    };

    return {'Contents': Contents};
});
  B   http://localhost:8888/static/services/contents.js?v=20200923091316   ³!«!!«!ÿÿÿÿ            !«!    !«!!«!       w   ï   o   ï   @       *   ³!«!!«!ÿÿÿÿ                      !«!   !«!   !«!!«!      
     @  ù   @   
         ³!«!!«!ÿÿÿÿ   ,   -          !«!.   ;ø                                    ÞÊ   ß¾   ½  G   N   ß¦F `P0 P   Ê5!«!   !«!	   !«!!«!    	   
   Ë  §  Ã  §      .        Ê5!«!   !«!   !«!   !«!   !«!   !«!!«!            Y    Y  -   )      ³!«!!«!ÿÿÿÿ   ?   @   -            !«!.   !«!A   !«!B   !«!C   !«!D   ;øg                                     	 ÜÊ  ßÞÊ  ßg   ¾  G   h       h   ¿   G   áH   ä¾  x h   Ê   ß¿   G   áH   ä¾   x £¦< `P5 .:  PM2 `P P3 Q Ê5!«!   !«!!«!    	     ;  	  3  	  @   <   @    !«!  «  	  £  	  D            Ê5!«!!«!   Ê5!«!   !«!!«!         ¸
    ¯
     W   &      ³!«!!«!ÿÿÿÿ   /   ,   0   1   2   -          !«!!«!       !«!3   !«!!«!4   !«!!«!5   !«!!«!6   !«!    !«!3   !«!4   !«!7   !«!5   !«!8   !«!6   !«!   !«!!«!            !«!9   !«!:   !«!;   !«!<   !«!=   !«!>   ;øý   V                     
            ÞÊ  ß5   9   9      9      9   Ê   ß¾  áH   ä½  v Ê  ß5	   Ê  ß½ G         ¾  ½ G   N   ß   ½ G
         ¾  ½ G
   N
   ß   ½ G         ¾     N   ß   ¿   áH   ä¾     %¿   áH   ä¾  v %¾   v £¦F[ `P5 6 6 : Oa `P.P8 `P: `P `P0 `P `P0 `P `P0 `P¦ *P(ÿÿÿãP3 Q  Ê5!«!   !«!!«!    	     ¡  )    )  s   .        Ê5!«!   !«!!«!    	     T  î  L  î     (       !«!    Ý    Ý              Ê5Ê5!«!   !«!!«!    	                (        Ê5!«!   !«!!«!    	     ¯  ­  §  ­  ¤   '        Ê5!«!   !«!!«!    	     Õ  v  Í  v  ®   &        Ê5!«!   !«!!«!    	      £        ½   &        Ê5!«!!   !«!!«!    	  "   û  ü  ó  ü  Ò   3        Ê5!«!#   !«!!«!      $   1    )     Ü   2   
   ³!«!!«!ÿÿÿÿ   /   1   0   -          !«!   !«!E   !«!!«!       !«!5   !«!!«!4   !«!!«!6   !«!    !«!7   !«!5   !«!4   !«!8   !«!6   !«!<   ;ø^   )                                 ÞÊ  ß¾  áH   ä½     v Ê   ß5      9   9      9   Ê  ß¿   áH	   ä¾   ¾  v £¦6 `P P8 `P5 : 6 ?0 `P P3 Q    Ê5!«!%   !«!!«!    	  &   U  U  M  U  æ   4        Ê5!«!'   !«!!«!    	  (     a    a  ï   3        Ê5!«!)   !«!!«!    	  *      È   ~   È     /        Ê5!«!+   !«!!«!       !«!   !«!    !«!   ;øÎ  Å                              C    - ½      v Ë   ß½      v Ë   ßm   Ë   ß¿      N   ß¿   m   N   ß¿   G   ¼   áH   ä¼	   G
   v N
   ß¿   G   G
   ¿   G   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m   N   ß¿   G
   m    N!   ß¿   G
   m"   N#   ß¿   G
   m$   N%   ß¿   G
   m&   N'   ß5(   ¿   9)   £¦0@ `P)	P9 `P)	PI
 `PK `P@  `P@( `P  3P9 `P?@- `P@@ `P@W `P@s `P@   `P@   `P@  ¤ `P@  ® `P@  ½ `P@  Ò `P@  Ü `P@  æ `P@  ï `P@  `P0000 `P%:Q  Ê5;ø                                       ¼      m   z ß¦@`P/PD P  ·ÝÆe      _jç²_jçB%Íbr6ê   C    :http://localhost:8888/static/services/contents.js?v=20200923091316 necko:classified 1 strongly-framed 1 request-method GET response-head HTTP/1.1 200 OK
Server: TornadoServer/6.0.4
Content-Type: application/javascript
Date: Wed, 23 Sep 2020 06:13:21 GMT
X-Content-Type-Options: nosniff
Content-Security-Policy: frame-ancestors 'self'; report-uri /api/security/csp-report
Accept-Ranges: bytes
Last-Modified: Wed, 23 Sep 2020 05:59:55 GMT
Expires: Sat, 21 Sep 2030 06:13:21 GMT
Cache-Control: max-age=315360000
Content-Length: 8434
 original-response-headers Server: TornadoServer/6.0.4
Content-Type: application/javascript
Date: Wed, 23 Sep 2020 06:13:21 GMT
X-Content-Type-Options: nosniff
Content-Security-Policy: frame-ancestors 'self'; report-uri /api/security/csp-report
Accept-Ranges: bytes
Last-Modified: Wed, 23 Sep 2020 05:59:55 GMT
Expires: Sat, 21 Sep 2030 06:13:21 GMT
Cache-Control: max-age=315360000
Content-Length: 8434
 ctid 2 uncompressed-len 0 net-response-time-onstart 26 net-response-time-onstop 26 alt-data 1;8434,javascript/moz-bytecode-20200831163820 alt-data-from-child 1   Tù